// Code generated by mockery v2.20.1. DO NOT EDIT.

package mocks

import (
	store "github.com/neonima/sample-networking/pkg/store"
	mock "github.com/stretchr/testify/mock"
)

// UserStore is an autogenerated mock type for the UserStore type
type UserStore struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: user
func (_m *UserStore) AddUser(user *store.UserContainer) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*store.UserContainer) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FriendWith provides a mock function with given fields: user
func (_m *UserStore) FriendWith(user *store.UserContainer) ([]*store.UserContainer, error) {
	ret := _m.Called(user)

	var r0 []*store.UserContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(*store.UserContainer) ([]*store.UserContainer, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*store.UserContainer) []*store.UserContainer); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*store.UserContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(*store.UserContainer) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userID
func (_m *UserStore) GetUser(userID int) (*store.UserContainer, error) {
	ret := _m.Called(userID)

	var r0 *store.UserContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*store.UserContainer, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) *store.UserContainer); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.UserContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFriend provides a mock function with given fields: user, friend
func (_m *UserStore) RemoveFriend(user *store.UserContainer, friend int) error {
	ret := _m.Called(user, friend)

	var r0 error
	if rf, ok := ret.Get(0).(func(*store.UserContainer, int) error); ok {
		r0 = rf(user, friend)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *UserStore) UpdateUser(user *store.UserContainer) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*store.UserContainer) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserStore creates a new instance of UserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserStore(t mockConstructorTestingTNewUserStore) *UserStore {
	mock := &UserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
