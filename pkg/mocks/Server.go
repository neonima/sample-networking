// Code generated by mockery v2.20.1. DO NOT EDIT.

package mocks

import (
	server "github.com/neonima/sample-networking/pkg/server"
	store "github.com/neonima/sample-networking/pkg/store"
	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Server) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Server) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithLogger provides a mock function with given fields: logger
func (_m *Server) WithLogger(logger server.Logger) server.Server {
	ret := _m.Called(logger)

	var r0 server.Server
	if rf, ok := ret.Get(0).(func(server.Logger) server.Server); ok {
		r0 = rf(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.Server)
		}
	}

	return r0
}

// WithStore provides a mock function with given fields: _a0
func (_m *Server) WithStore(_a0 store.UserStore) server.Server {
	ret := _m.Called(_a0)

	var r0 server.Server
	if rf, ok := ret.Get(0).(func(store.UserStore) server.Server); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.Server)
		}
	}

	return r0
}

type mockConstructorTestingTNewServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServer(t mockConstructorTestingTNewServer) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
