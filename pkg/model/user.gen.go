// Code generated by Gojay. DO NOT EDIT.

package model

import (
	"github.com/francoispqt/gojay"
)

type Ints []int

// UnmarshalJSONArray decodes JSON array elements into slice
func (a *Ints) UnmarshalJSONArray(dec *gojay.Decoder) error {
	var value int
	if err := dec.Int(&value); err != nil {
		return err
	}
	*a = append(*a, value)
	return nil
}

// MarshalJSONArray encodes arrays into JSON
func (a Ints) MarshalJSONArray(enc *gojay.Encoder) {
	for _, item := range a {
		enc.Int(item)
	}
}

// IsNil checks if array is nil
func (a Ints) IsNil() bool {
	return len(a) == 0
}

// MarshalJSONObject implements MarshalerJSONObject
func (u *User) MarshalJSONObject(enc *gojay.Encoder) {
	enc.IntKeyOmitEmpty("user_id", u.ID)
	var friendsSlice = Ints(u.Friends)
	enc.ArrayKeyOmitEmpty("friends", friendsSlice)
	enc.BoolKeyOmitEmpty("online", u.Online)
}

// IsNil checks if instance is nil
func (u *User) IsNil() bool {
	return u == nil
}

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (u *User) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {

	switch k {
	case "user_id":
		return dec.Int(&u.ID)

	case "friends":
		var aSlice = Ints{}
		err := dec.Array(&aSlice)
		if err == nil && len(aSlice) > 0 {
			u.Friends = []int(aSlice)
		}
		return err

	case "online":
		return dec.Bool(&u.Online)

	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func (u *User) NKeys() int { return 3 }
